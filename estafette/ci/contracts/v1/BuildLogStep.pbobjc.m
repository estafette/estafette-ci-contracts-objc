// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/contracts/v1/build_log_step.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "estafette/ci/contracts/v1/BuildLogStep.pbobjc.h"
#import "estafette/ci/contracts/v1/BuildLogLine.pbobjc.h"
#import "estafette/ci/contracts/v1/BuildLogStepDockerImage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BuildLogStepRoot

@implementation BuildLogStepRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BuildLogStepRoot_FileDescriptor

static GPBFileDescriptor *BuildLogStepRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"estafette.ci.contracts.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - BuildLogStep

@implementation BuildLogStep

@dynamic step;
@dynamic hasImage, image;
@dynamic runIndex;
@dynamic hasDuration, duration;
@dynamic logLinesArray, logLinesArray_Count;
@dynamic exitCode;
@dynamic status;
@dynamic autoInjected;

typedef struct BuildLogStep__storage_ {
  uint32_t _has_storage_[1];
  NSString *step;
  BuildLogStepDockerImage *image;
  GPBDuration *duration;
  NSMutableArray *logLinesArray;
  NSString *status;
  int64_t runIndex;
  int64_t exitCode;
} BuildLogStep__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "step",
        .dataTypeSpecific.className = NULL,
        .number = BuildLogStep_FieldNumber_Step,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuildLogStep__storage_, step),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(BuildLogStepDockerImage),
        .number = BuildLogStep_FieldNumber_Image,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BuildLogStep__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "runIndex",
        .dataTypeSpecific.className = NULL,
        .number = BuildLogStep_FieldNumber_RunIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BuildLogStep__storage_, runIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = BuildLogStep_FieldNumber_Duration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BuildLogStep__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "logLinesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BuildLogLine),
        .number = BuildLogStep_FieldNumber_LogLinesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BuildLogStep__storage_, logLinesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "exitCode",
        .dataTypeSpecific.className = NULL,
        .number = BuildLogStep_FieldNumber_ExitCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BuildLogStep__storage_, exitCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = BuildLogStep_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BuildLogStep__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "autoInjected",
        .dataTypeSpecific.className = NULL,
        .number = BuildLogStep_FieldNumber_AutoInjected,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuildLogStep class]
                                     rootClass:[BuildLogStepRoot class]
                                          file:BuildLogStepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuildLogStep__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
