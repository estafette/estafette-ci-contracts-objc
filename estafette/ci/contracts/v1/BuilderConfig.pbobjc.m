// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/contracts/v1/builder_config.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "estafette/ci/contracts/v1/BuilderConfig.pbobjc.h"
#import "estafette/ci/contracts/v1/BuildParamsConfig.pbobjc.h"
#import "estafette/ci/contracts/v1/BuildVersionConfig.pbobjc.h"
#import "estafette/ci/contracts/v1/CiServerConfig.pbobjc.h"
#import "estafette/ci/contracts/v1/CredentialConfig.pbobjc.h"
#import "estafette/ci/contracts/v1/GitConfig.pbobjc.h"
#import "estafette/ci/contracts/v1/ReleaseParamsConfig.pbobjc.h"
#import "estafette/ci/contracts/v1/TrustedImageConfig.pbobjc.h"
#import "estafette/ci/manifest/v1/EstafetteEvent.pbobjc.h"
#import "estafette/ci/manifest/v1/EstafetteManifest.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BuilderConfigRoot

@implementation BuilderConfigRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BuilderConfigRoot_FileDescriptor

static GPBFileDescriptor *BuilderConfigRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"estafette.ci.contracts.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - BuilderConfig

@implementation BuilderConfig

@dynamic action;
@dynamic track;
@dynamic registryMirror;
@dynamic dockerDaemonMtu;
@dynamic hasManifest, manifest;
@dynamic jobName;
@dynamic releaseName;
@dynamic eventsArray, eventsArray_Count;
@dynamic hasCiServer, ciServer;
@dynamic hasBuildParams, buildParams;
@dynamic hasReleaseParams, releaseParams;
@dynamic hasGit, git;
@dynamic hasBuildVersion, buildVersion;
@dynamic credentialsArray, credentialsArray_Count;
@dynamic trustedImagesArray, trustedImagesArray_Count;

typedef struct BuilderConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *action;
  NSString *track;
  NSString *registryMirror;
  NSString *dockerDaemonMtu;
  EstafetteManifest *manifest;
  NSString *jobName;
  NSString *releaseName;
  NSMutableArray *eventsArray;
  CiServerConfig *ciServer;
  BuildParamsConfig *buildParams;
  ReleaseParamsConfig *releaseParams;
  GitConfig *git;
  BuildVersionConfig *buildVersion;
  NSMutableArray *credentialsArray;
  NSMutableArray *trustedImagesArray;
} BuilderConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.className = NULL,
        .number = BuilderConfig_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, action),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "track",
        .dataTypeSpecific.className = NULL,
        .number = BuilderConfig_FieldNumber_Track,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, track),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "registryMirror",
        .dataTypeSpecific.className = NULL,
        .number = BuilderConfig_FieldNumber_RegistryMirror,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, registryMirror),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dockerDaemonMtu",
        .dataTypeSpecific.className = NULL,
        .number = BuilderConfig_FieldNumber_DockerDaemonMtu,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, dockerDaemonMtu),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "manifest",
        .dataTypeSpecific.className = GPBStringifySymbol(EstafetteManifest),
        .number = BuilderConfig_FieldNumber_Manifest,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, manifest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jobName",
        .dataTypeSpecific.className = NULL,
        .number = BuilderConfig_FieldNumber_JobName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, jobName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "releaseName",
        .dataTypeSpecific.className = NULL,
        .number = BuilderConfig_FieldNumber_ReleaseName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, releaseName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "eventsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(EstafetteEvent),
        .number = BuilderConfig_FieldNumber_EventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, eventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ciServer",
        .dataTypeSpecific.className = GPBStringifySymbol(CiServerConfig),
        .number = BuilderConfig_FieldNumber_CiServer,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, ciServer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buildParams",
        .dataTypeSpecific.className = GPBStringifySymbol(BuildParamsConfig),
        .number = BuilderConfig_FieldNumber_BuildParams,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, buildParams),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "releaseParams",
        .dataTypeSpecific.className = GPBStringifySymbol(ReleaseParamsConfig),
        .number = BuilderConfig_FieldNumber_ReleaseParams,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, releaseParams),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "git",
        .dataTypeSpecific.className = GPBStringifySymbol(GitConfig),
        .number = BuilderConfig_FieldNumber_Git,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, git),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buildVersion",
        .dataTypeSpecific.className = GPBStringifySymbol(BuildVersionConfig),
        .number = BuilderConfig_FieldNumber_BuildVersion,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, buildVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "credentialsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CredentialConfig),
        .number = BuilderConfig_FieldNumber_CredentialsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, credentialsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trustedImagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TrustedImageConfig),
        .number = BuilderConfig_FieldNumber_TrustedImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BuilderConfig__storage_, trustedImagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuilderConfig class]
                                     rootClass:[BuilderConfigRoot class]
                                          file:BuilderConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuilderConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
