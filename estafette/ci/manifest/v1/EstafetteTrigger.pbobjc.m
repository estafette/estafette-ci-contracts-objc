// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_trigger.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "estafette/ci/manifest/v1/EstafetteTrigger.pbobjc.h"
#import "estafette/ci/manifest/v1/EstafetteCronTrigger.pbobjc.h"
#import "estafette/ci/manifest/v1/EstafetteDockerTrigger.pbobjc.h"
#import "estafette/ci/manifest/v1/EstafetteGitTrigger.pbobjc.h"
#import "estafette/ci/manifest/v1/EstafettePipelineTrigger.pbobjc.h"
#import "estafette/ci/manifest/v1/EstafettePubSubTrigger.pbobjc.h"
#import "estafette/ci/manifest/v1/EstafetteReleaseTrigger.pbobjc.h"
#import "estafette/ci/manifest/v1/EstafetteTriggerBuildAction.pbobjc.h"
#import "estafette/ci/manifest/v1/EstafetteTriggerReleaseAction.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EstafetteTriggerRoot

@implementation EstafetteTriggerRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - EstafetteTriggerRoot_FileDescriptor

static GPBFileDescriptor *EstafetteTriggerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"estafette.ci.manifest.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - EstafetteTrigger

@implementation EstafetteTrigger

@dynamic hasPipeline, pipeline;
@dynamic hasRelease_p, release_p;
@dynamic hasGit, git;
@dynamic hasDocker, docker;
@dynamic hasCron, cron;
@dynamic hasPubSub, pubSub;
@dynamic hasBuildAction, buildAction;
@dynamic hasReleaseAction, releaseAction;

typedef struct EstafetteTrigger__storage_ {
  uint32_t _has_storage_[1];
  EstafettePipelineTrigger *pipeline;
  EstafetteReleaseTrigger *release_p;
  EstafetteGitTrigger *git;
  EstafetteDockerTrigger *docker;
  EstafetteCronTrigger *cron;
  EstafettePubSubTrigger *pubSub;
  EstafetteTriggerBuildAction *buildAction;
  EstafetteTriggerReleaseAction *releaseAction;
} EstafetteTrigger__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pipeline",
        .dataTypeSpecific.className = GPBStringifySymbol(EstafettePipelineTrigger),
        .number = EstafetteTrigger_FieldNumber_Pipeline,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EstafetteTrigger__storage_, pipeline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "release_p",
        .dataTypeSpecific.className = GPBStringifySymbol(EstafetteReleaseTrigger),
        .number = EstafetteTrigger_FieldNumber_Release_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EstafetteTrigger__storage_, release_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "git",
        .dataTypeSpecific.className = GPBStringifySymbol(EstafetteGitTrigger),
        .number = EstafetteTrigger_FieldNumber_Git,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EstafetteTrigger__storage_, git),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "docker",
        .dataTypeSpecific.className = GPBStringifySymbol(EstafetteDockerTrigger),
        .number = EstafetteTrigger_FieldNumber_Docker,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EstafetteTrigger__storage_, docker),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cron",
        .dataTypeSpecific.className = GPBStringifySymbol(EstafetteCronTrigger),
        .number = EstafetteTrigger_FieldNumber_Cron,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EstafetteTrigger__storage_, cron),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pubSub",
        .dataTypeSpecific.className = GPBStringifySymbol(EstafettePubSubTrigger),
        .number = EstafetteTrigger_FieldNumber_PubSub,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(EstafetteTrigger__storage_, pubSub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buildAction",
        .dataTypeSpecific.className = GPBStringifySymbol(EstafetteTriggerBuildAction),
        .number = EstafetteTrigger_FieldNumber_BuildAction,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(EstafetteTrigger__storage_, buildAction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "releaseAction",
        .dataTypeSpecific.className = GPBStringifySymbol(EstafetteTriggerReleaseAction),
        .number = EstafetteTrigger_FieldNumber_ReleaseAction,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(EstafetteTrigger__storage_, releaseAction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EstafetteTrigger class]
                                     rootClass:[EstafetteTriggerRoot class]
                                          file:EstafetteTriggerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EstafetteTrigger__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
