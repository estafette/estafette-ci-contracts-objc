// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/manifest.v1/estafette_release_event.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "protos/manifest.v1/EstafetteReleaseEvent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EstafetteReleaseEventRoot

@implementation EstafetteReleaseEventRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - EstafetteReleaseEventRoot_FileDescriptor

static GPBFileDescriptor *EstafetteReleaseEventRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"manifest.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - EstafetteReleaseEvent

@implementation EstafetteReleaseEvent

@dynamic releaseVersion;
@dynamic repoSource;
@dynamic repoOwner;
@dynamic repoName;
@dynamic target;
@dynamic status;
@dynamic event;

typedef struct EstafetteReleaseEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *releaseVersion;
  NSString *repoSource;
  NSString *repoOwner;
  NSString *repoName;
  NSString *target;
  NSString *status;
  NSString *event;
} EstafetteReleaseEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "releaseVersion",
        .dataTypeSpecific.className = NULL,
        .number = EstafetteReleaseEvent_FieldNumber_ReleaseVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EstafetteReleaseEvent__storage_, releaseVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "repoSource",
        .dataTypeSpecific.className = NULL,
        .number = EstafetteReleaseEvent_FieldNumber_RepoSource,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EstafetteReleaseEvent__storage_, repoSource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "repoOwner",
        .dataTypeSpecific.className = NULL,
        .number = EstafetteReleaseEvent_FieldNumber_RepoOwner,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EstafetteReleaseEvent__storage_, repoOwner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "repoName",
        .dataTypeSpecific.className = NULL,
        .number = EstafetteReleaseEvent_FieldNumber_RepoName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EstafetteReleaseEvent__storage_, repoName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = NULL,
        .number = EstafetteReleaseEvent_FieldNumber_Target,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EstafetteReleaseEvent__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = EstafetteReleaseEvent_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(EstafetteReleaseEvent__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "event",
        .dataTypeSpecific.className = NULL,
        .number = EstafetteReleaseEvent_FieldNumber_Event,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(EstafetteReleaseEvent__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EstafetteReleaseEvent class]
                                     rootClass:[EstafetteReleaseEventRoot class]
                                          file:EstafetteReleaseEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EstafetteReleaseEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
